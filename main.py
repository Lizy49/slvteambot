import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, BufferedInputFile
from aiogram.enums import ParseMode
import asyncio
import os

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8451963488:AAFNwy9zq0savVxNX6-9sm5dSto7pcTTxKY"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

IMAGE_PATHS = {
    "main": "images/2.jpg"
}

def get_main_menu_keyboard():
    keyboard = [
        [
            types.InlineKeyboardButton(text="–ò–Ω—Ñ–æ", callback_data="info"),
            types.InlineKeyboardButton(text="–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="cooperation")
        ],
        [
            types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ª —Å —Ç–µ–º–∫–∞–º–∏", callback_data="themes")
        ]
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)

async def send_or_edit_photo(callback: types.CallbackQuery, image_key: str, caption: str, reply_markup=None):
    try:
        if os.path.exists(IMAGE_PATHS[image_key]):
            with open(IMAGE_PATHS[image_key], 'rb') as file:
                photo_data = file.read()
            
            if callback.message.photo:
                await callback.message.edit_media(
                    media=types.InputMediaPhoto(
                        media=BufferedInputFile(photo_data, filename=f"{image_key}.jpg"),
                        caption=caption
                    ),
                    reply_markup=reply_markup
                )
            else:
                await callback.message.answer_photo(
                    photo=BufferedInputFile(photo_data, filename=f"{image_key}.jpg"),
                    caption=caption,
                    reply_markup=reply_markup
                )
        else:
            await callback.message.edit_caption(
                caption=caption,
                reply_markup=reply_markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_key}: {e}")
        await callback.message.edit_caption(
            caption=caption,
            reply_markup=reply_markup
        )

@dp.message(Command("start"))
async def cmd_start(message: Message):
    try:
        if os.path.exists(IMAGE_PATHS["main"]):
            with open(IMAGE_PATHS["main"], 'rb') as file:
                photo_data = file.read()
            
            await message.answer_photo(
                photo=BufferedInputFile(photo_data, filename="main.jpg"),
                caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await message.answer(
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@dp.callback_query(lambda c: c.data == "info")
async def show_info(callback: types.CallbackQuery):
    caption = (
        "üîó SILVERSTEAMS ‚Äì —ç—Ç–æ –ø—Ä–æ–µ–∫—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –Ω–∞—à–µ–º –æ–ø—ã—Ç–µ. –ó–¥–µ—Å—å –º—ã —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω—å–≥–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ.\n"
        "üîì –ú—ã –ø—É–±–ª–∏–∫—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–∞–Ω—É–∞–ª—ã —Ç—Ä–∏ —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –∞ —Ç–∞–∫–∂–µ —É –Ω–∞—Å –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–∞–Ω—É–∞–ª—ã –∏ –≤—Å—ë, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.\n"
        "üñáÔ∏è –ü–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º ‚Äì @silversssteams"
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await send_or_edit_photo(callback, "info", caption, keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "cooperation")
async def show_cooperation(callback: types.CallbackQuery):
    caption = (
        "üí∏ –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n"
        "üñáÔ∏è –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –∏–ª–∏ –¥—Ä—É–≥–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å @silversssteams."
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await send_or_edit_photo(callback, "cooperation", caption, keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "themes")
async def show_themes(callback: types.CallbackQuery):
    caption = (
        "‚öñÔ∏è –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–∞–Ω–∞–ª –ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –æ–ø—Ä–∞–≤–¥–∞–µ—Ç –≤—Å–µ –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã. –ó–∞ –Ω–µ–±–æ–ª—å—à—É—é –ø–ª–∞—Ç—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç–æ–Ω–Ω—É –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞.\n\n"
        "‚öîÔ∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –î–ª—è –ø–æ–∫—É–ø–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ‚Äì @silversssteams."
    )
    
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")]
    ])
    
    await send_or_edit_photo(callback, "themes", caption, keyboard)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "back_main")
async def back_main(callback: types.CallbackQuery):
    try:
        if os.path.exists(IMAGE_PATHS["main"]):
            with open(IMAGE_PATHS["main"], 'rb') as file:
                photo_data = file.read()
            
            await callback.message.edit_media(
                media=types.InputMediaPhoto(
                    media=BufferedInputFile(photo_data, filename="main.jpg"),
                    caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
                ),
                reply_markup=get_main_menu_keyboard()
            )
        else:
            await callback.message.edit_caption(
                caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    os.makedirs("images", exist_ok=True)
    asyncio.run(main())